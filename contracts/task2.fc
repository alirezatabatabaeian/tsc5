#include "imports/stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    ;; if (flags & 1) {
    ;;     return ();
    ;; }

    slice ds = get_data().begin_parse();
    (slice admin_address, cell users) = (ds~load_msg_addr(), ds~load_dict());

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if(op == 0x368ddef3){
        throw_unless(120, equal_slices(sender_address, admin_address));
        int new_user = in_msg_body~load_msg_addr().skip_bits(11).preload_uint(256);
        users~udict_set(256, new_user, in_msg_body);
        set_data(begin_cell().store_slice(admin_address).store_dict(users).end_cell());
        return ();
    }

    if(op == 0x278205c8){
        throw_unless(120, equal_slices(sender_address, admin_address));
        int remove_user = in_msg_body~load_msg_addr().skip_bits(11).preload_uint(256);
        int flag = users~udict_delete?(256, remove_user);
        throw_unless(121, flag);
        set_data(begin_cell().store_slice(admin_address).store_dict(users).end_cell());
        return ();
    }

    if(op == 0x68530b3){
        throw_unless(122, ~ users.dict_empty?());

        int total_shares = 0;
        (int key, slice value, int flag) = users.udict_get_min?(256);
        while(flag){
            total_shares += value~load_uint(32);
            (key, value, flag) = users.udict_get_next?(256, key);
        }

        (int key, slice value, int flag) = users.udict_get_min?(256);
        while(flag){
            int share = value~load_uint(32);
            send_raw_message(begin_cell().store_uint(0x18, 6).store_uint(2, 2).store_uint(0, 1).store_int(0, 8).store_uint(key, 256).store_coins(share * msg_value / total_shares).store_uint(0, 107).end_cell(), 1);
            (key, value, flag) = users.udict_get_next?(256, key);
        }

        return ();
    }

    if(op == 0x7362d09c){
        throw_unless(122, ~ users.dict_empty?());

        int token_amount = in_msg_body~load_coins();

        int total_shares = 0;
        (int key, slice value, int flag) = users.udict_get_min?(256);
        while(flag){
            total_shares += value~load_uint(32);
            (key, value, flag) = users.udict_get_next?(256, key);
        }

        (int key, slice value, int flag) = users.udict_get_min?(256);
        while(flag){
            int share = value~load_uint(32);
            send_raw_message(begin_cell().store_uint(0x18, 6).store_slice(sender_address).store_coins(20000000).store_uint(1, 107).store_ref(
                    begin_cell().store_uint(0xf8a7ea5, 32).store_uint(0, 64).store_coins(share * token_amount / total_shares).store_uint(2, 2).store_uint(0, 1).store_int(0, 8).store_uint(key, 256)
                .store_uint(2, 2).store_uint(0, 1).store_int(0, 8).store_uint(key, 256).store_uint(0, 1).store_coins(1).store_uint(0, 1).end_cell()
                ).end_cell(), 0);
            (key, value, flag) = users.udict_get_next?(256, key);
        }

        return ();
    }
}

cell get_users() method_id {
    slice ds = get_data().begin_parse();
    (slice admin_address, cell users) = (ds~load_msg_addr(), ds~load_dict());
    return users;
}

int get_user_share(slice user_address) method_id {
    slice ds = get_data().begin_parse();
    (slice admin_address, cell users) = (ds~load_msg_addr(), ds~load_dict());
    (slice value, _) = users.udict_get?(256, user_address.skip_bits(11).preload_uint(256));
    return value~load_uint(32);
}