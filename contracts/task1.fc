#include "imports/stdlib.fc";

(int, int, slice, int) load_data() impure {
    slice ds = get_data().begin_parse();
    return (ds~load_uint(256), ds~load_uint(32), ds~load_msg_addr(), ds~load_uint(32));
}

() save_data(int public_key, int execution_time, slice receiver, int seqno) impure {
    set_data(begin_cell().store_uint(public_key, 256).store_uint(execution_time, 32).store_slice(receiver).store_uint(seqno, 32).end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

() recv_external(slice in_msg) impure {
    int op = in_msg~load_uint(32);
    (int public_key, int execution_time, slice receiver, int seqno) = load_data();
    int now = now();

    if(op == 0x9df10277){
        in_msg~skip_bits(64);
        cell information = in_msg~load_ref();
        int hash = cell_hash(information);
        slice information = information.begin_parse();
        int locked_for = information~load_uint(32);
        int new_seqno = information.preload_uint(32); ;; preload

        throw_unless(119, new_seqno == seqno + 1);
        throw_unless(120, check_signature(hash, in_msg, public_key));
        throw_unless(121, locked_for > 0);
        throw_unless(122, execution_time >= now);
        throw_unless(123, now + locked_for >= execution_time);
        accept_message();

        save_data(public_key, now + locked_for, receiver, new_seqno);
        return ();
    }

    if(op == 0xbb4be234){
        throw_unless(124, now > execution_time);
        accept_message();

        send_raw_message(begin_cell().store_uint(0x18, 6).store_slice(receiver).store_coins(0).store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1).end_cell(), 128);
        return();
    }
}

int get_seqno() method_id {
    (_, _, _, int seqno) = load_data();
    return seqno;
}

int get_execution_time() method_id {
    (_, int execution_time, _, _) = load_data();
    return execution_time;
} 
